@using System.Collections.Generic
@using System.Linq
@using Accelerate.Features.Content.Models.Views
@using Accelerate.Foundations.Common.Helpers
@using Microsoft.AspNetCore.Http 
@model ThreadPage

<div class="fixed-scroll-container" x-data="{
    isScrollSet: false,
    filterEvent: 'onFilterChange',
    actionEvent: 'action:post',
    quoteEvent: 'quote:post',
     init() {
        if('@Model.Item.ParentId' == '') {
            this.isScrollSet=true;
        }
        this.$events.on('ancestors-loaded', () => {
            this.setScroll()
        })
    },
    setScroll() {
        this.$nextTick(() => {
            this.isScrollSet = true;
            const el2 = document.getElementById('@Model.Item.ThreadId');
            const headerOffset = 105;
            const y = el2.getBoundingClientRect().top + window.pageYOffset - headerOffset;
            window.scrollTo({
                top: y,
                left: 0,
                behavior: 'instant'
            });
        })
    }
  }">

    <summary class="primary" >
        <a href="/" style="text-decoration:none;">
            <i class="material-icons">expand_less</i>
            <sup class="primary">
                <strong>
                    Return to all
                </strong>
            </sup>
        </a>
    </summary>
    @if (Model.ChannelLink != null)
    {
        <div class="dense" style="border: 0px">
            <summary class="primary">
                <a href="@Model.ChannelLink.Href" style="text-decoration:none;">
                    <i class="material-icons">chevron_left</i>
                    <sup class="primary">
                        <strong>
                            @Model.ChannelLink.Text
                        </strong>
                    </sup>
                </a>
            </summary>
        </div>
    }
    @if (Model.Item.ParentId != null)
    {
        <!-- Parents -->
        <div
            x-data="listThreadAscendantCards( {
            item: @JsonSerializerHelper.SerializeObject(Model.Item),
            items: @JsonSerializerHelper.SerializeObject(Model.Parents),
            userId: '@Model.UserId',
            searchUrl: '@Model.ParentPostsApiUrl'
        })">
        </div> 
    }
    <!-- Original Post -->
    <div x-data="cardPost({
        item:  @JsonSerializerHelper.SerializeObject(Model.Item),
        userId: '@Model.UserId',
    })" ></div>
    <hr id="reply-line" />

    <!-- Response Form -->
    @if (Model.IsAuthenticated)
    {
        <div x-data="appFormResponse(@JsonSerializerHelper.SerializeObject(Model.FormCreateReply))"></div>
    }

     <!-- Filters -->
    <div x-data="appNavFilters({
        filters: @JsonSerializerHelper.SerializeObject(Model.Filters),
        header: 'Replies',
        event: '@Model.FilterEvent'
    })"></div>

    <!-- Replies -->
    <div x-data="listThreadCards( {
        actionUrl: '@Model.ActionsApiUrl',
        searchUrl: '@Model.PostsApiUrl',
        filterEvent: '@Model.FilterEvent',
        actionEvent: '@Model.ActionEvent',
        itemEvent: $store.wssContentPosts.getMessageEvent(),
        parentId: '@Model.Item.Id',
        filters: {
            parentId: ['@Model.Item.Id']
        },
        userId: '@Model.UserId',
        items: []
    })">
    </div>

    <hr />
    <!--
    <div class="reply-padding"></div>
    -->
    <div class="loading-overlay" x-show="!isScrollSet">
        <article class="loading-spinner" aria-busy="true"></article>
    </div>
</div>

<!-- Modals -->
<!-- Edit post -->
@if (Model.IsAuthenticated)
{
    <div x-data="modalForm(@JsonSerializerHelper.SerializeObject(Model.ModalEditReply))"></div>

    <!-- Delete post -->
    <div x-data="modalForm(@JsonSerializerHelper.SerializeObject(Model.ModalDeleteReply))"></div>

    <!-- Share post -->
    <div x-data="modal({target: 'modal-share-post', title: 'Share post', text: 'test 123'  })"></div>
}