@using System.Collections.Generic
@using System.Linq
@using Accelerate.Features.Content.Models.Views
@using Accelerate.Foundations.Common.Helpers
@using Microsoft.AspNetCore.Http 
@model ThreadPage

<div class="fixed-scroll-container" x-data="{
    isScrollSet: false,
    filterEvent: 'onFilterChange',
    actionEvent: 'action:post',
    quoteEvent: 'quote:post',
    init() {
        const self = this;
        setTimeout(function() {
            self.setScrollPosition();
        }, 100);
    },
    setScrollPosition() {
        this.$nextTick(() => {
            const el = document.getElementById('@Model.Item.ThreadId');
            const headerOffset = 75;
            const y = el.getBoundingClientRect().top + window.pageYOffset - headerOffset;
            window.scrollTo({
                top: y,
                left: 0,
                behavior: 'instant'
            });
        });
    },
  }">

    <summary class="primary" >
        <a href="/" style="text-decoration:none;">
            <i class="material-icons">expand_less</i>
            <sup class="primary">
                <strong>
                    Return to all
                </strong>
            </sup>
        </a>
    </summary>
    @if (Model.ChannelLink != null)
    {
        <div class="dense" style="border: 0px">
            <summary class="primary">
                <a href="@Model.ChannelLink.Href" style="text-decoration:none;">
                    <i class="material-icons">chevron_left</i>
                    <sup class="primary">
                        <strong>
                            @Model.ChannelLink.Text
                        </strong>
                    </sup>
                </a>
            </summary>
        </div>
    }
   
    <!-- Threadline -->
    <div
        x-data="listThreadAscendantCards( {
        item: @JsonSerializerHelper.SerializeObject(Model.Item),
        results: @JsonSerializerHelper.SerializeObject(Model.ThreadData),
        userId: '@Model.UserId',
        searchUrl: '@Model.ParentPostsApiUrl'
    })">
    </div>

    <div x-data="cardPostEditable({
        item: @JsonSerializerHelper.SerializeObject(Model.Item),
        userId: '@Model.UserId',
        itemEvent: $store.wssContentPosts.getMessageEvent(),
        parentId: '@Model.Item.ParentId',
    })"></div>

    <hr id="reply-line" />

    @if (Model.IsDeactivated)
    {
        <article>Reactivate your account to respond</article>
    }
    else if (Model.IsAuthenticated)
    {
        <div style="margin-bottom: 8px;" x-data="appFormResponse(@JsonSerializerHelper.SerializeObject(Model.FormCreateReply))"></div>
    }
    else
    {
        <article>Login to respond</article>
    }

     <!-- Filters -->
    <div x-data="appNavFilters({
        filters: @JsonSerializerHelper.SerializeObject(Model.Filters),
        header: 'Replies',
        event: '@Model.FilterEvent'
    })"></div>

    <!-- Replies -->
    <div x-data="listCards( {
        actionUrl: '@Model.ActionsApiUrl',
        searchUrl: '@Model.PostsApiUrl',
        filterEvent: '@Model.FilterEvent',
        actionEvent: '@Model.ActionEvent',
        itemEvent: $store.wssContentPosts.getMessageEvent(),
        filters: {
            parentId: '@Model.Item.Id'
        },
        showReplies: true,
        forceLoad: true,
        userId: '@Model.UserId',
        items:  @JsonSerializerHelper.SerializeObject(Model.Replies),
    })">
    </div>

    <hr />
     
    <div class="reply-padding"></div>
    <!--
    <div class="loading-overlay" x-show="!isScrollSet">
        <article class="loading-spinner" aria-busy="true"></article>
    </div>
    -->
</div>

<!-- Modals -->
<!-- Edit post -->
@if (Model.IsAuthenticated)
{
    <div x-data="modalForm(@JsonSerializerHelper.SerializeObject(Model.ModalEditReply))"></div>

    <!-- Delete post -->
    <div x-data="modalForm(@JsonSerializerHelper.SerializeObject(Model.ModalDeleteReply))"></div>

    <!-- Delete post -->
    <!--
    <div x-data="modalForm(JsonSerializerHelper.SerializeObject(Model.ModalLabelPost))"></div>
    -->
    <!-- Share post -->
    <div x-data="modal({target: 'modal-share-post', title: 'Share post', text: 'test 123'  })"></div>
}