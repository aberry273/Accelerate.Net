@using System.Collections.Generic
@using System.Linq
@using Accelerate.Features.Content.Models.Views
@using Accelerate.Foundations.Common.Helpers
@using Microsoft.AspNetCore.Http 
@model ThreadPage

<div x-data="{
     item: @JsonSerializerHelper.SerializeObject(Model.Item),
     items: @JsonSerializerHelper.SerializeObject(Model.Replies),
     init() {
     this.$events.on('action-reply', (item)=>
        {
            self.selectedId = item.id;
        })
            this.$events.on('action-close', (item) => {
            self.selected = null;
        })
            this.$events.on('action-like', (item) => {
            this.$store.content.likePost(item)
        })
            this.$events.on('action-agree', (item) => {
            this.$store.content.agreePost(item)
        })
            this.$events.on('action-disagree', (item) => {
            this.$store.content.disagreePost(item)
        })
        }
    }">
    <nav>
        <ul>
            <li>
                <a href="@Model.PreviousUrl">
                    <i aria-label="Agree" class="icon material-icons icon-click" rel="prev">chevron_left</i>
                </a>
            </li>
            <li>
                <strong>@Model.Item.ThreadId</strong>
            </li>
        </ul>
    </nav>
    <!-- Original post -->
    <div x-data="appCardPost({
        item: item,
        expandable: false,
    })"></div>

    <!--Feed-->
    <div x-data="appNavFilters({})"></div>

    <!-- Response Form -->
    <article>
        <!--
        <div x-data="appFormResponse({
      postbackUrl: 'https://localhost:7220/api/contentpost',
      postbackType: 'POST',
      event: 'post:created',
      fieldPlaceholder: 'Write a reply',
      label: 'Reply',
        fields: [
          {
            name: 'Content',
            type: 'textarea',
            placeholder: 'Write a reply',
            autocomplete: null,
            helper: '',
            clearOnSubmit: true,
          },
          {
            name: 'ParentId',
            type: 'input',
            disabled: true,
            hidden: true,
            autocomplete: null,
            helper: '',
            value: item.id,
          },
          {
            name: 'Status',
            type: 'input',
            disabled: true,
            hidden: true,
            autocomplete: null,
            helper: '',
            value: 'Hidden',
          },
          {
            name: 'ChannelId',
            type: 'input',
            disabled: true,
            hidden: true,
            autocomplete: null,
            helper: '',
            value: item.channelId,
          },
          {
            name: 'ThreadId',
            type: 'input',
            disabled: true,
            hidden: true,
            autocomplete: null,
            helper: '',
            value: '@Model.Item.ThreadId',
          },
          {
            name: 'Tags',
            type: 'input',
            disabled: true,
            hidden: true,
            autocomplete: null,
            helper: '',
            value: item.tags,
          },
          {
            name: 'Category',
            type: 'input',
            disabled: true,
            hidden: true,
            autocomplete: null,
            helper: '',
            value: item.category,
          },
          {
            name: 'UserId',
            type: 'input',
            disabled: true,
            hidden: true,
            autocomplete: null,
            helper: '',
            value: item.userId,
          },
        ]
    })"></div>
    -->
        <div x-data="formAjax(@JsonSerializerHelper.SerializeObject(Model.FormCreateReply))"></div>
    </article>

    <!--Responses-->
    <main x-transition>
        <div x-data="appListReplies({
      sourceUrl: 'https://localhost:7220/api/contentpost',
      threadUrl: 'https://localhost:7220/content/thread',
      event: 'post:created',
      items: items,
    })"
    x-init="await fetchItems()"></div>
    </main>
</div>

<!-- Modals -->
<!-- Edit post -->
<div x-data="modalForm(@JsonSerializerHelper.SerializeObject(Model.ModalEditReply))"></div>

<!-- Delete post -->
<div x-data="modalForm(@JsonSerializerHelper.SerializeObject(Model.ModalDeleteReply))"></div>

<!-- Share post -->
<div x-data="modal({target: 'modal-share-post', title: 'Share post', text: 'test 123'  })"></div>
