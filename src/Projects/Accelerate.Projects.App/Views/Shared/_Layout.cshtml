@inject Microsoft.Extensions.Hosting.IHostEnvironment env
@inject UserManager<AccountUser> UserManager
@model BasePage
@{
    var lang = Model.Metadata.LanguageCode ?? "en";
}
<!DOCTYPE html>
<html lang="@lang">
<head>
    @{
        if (Model.Metadata != null)
            await Html.RenderPartialAsync("~/Views/Shared/PageMetadata.cshtml", Model.Metadata);
        if (Model.SEO != null)
            await Html.RenderPartialAsync("~/Views/Shared/PageSeoMetadata.cshtml", Model.SEO);
        if (Model.SocialMetadata != null)
            await Html.RenderPartialAsync("~/Views/Shared/PageSocialMetadata.cshtml", Model.SocialMetadata);
    }
    <!-- Icons -->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

    <!-- CSS Libraries -->
    <!-- Classbased -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@@picocss/pico@2/css/pico.min.css" />
    <!-- Classless - centered viewport -->
    <!-- <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@@picocss/pico@2/css/pico.classless.min.css" /> -->
    <!-- Classless - fluid viewport -->
    <!-- <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@@picocss/pico@2/css/pico.fluid.classless.min.css" /> -->
    <!-- CSS Overrides -->
    <link rel="stylesheet" href="~/src/css/app.css" />
    <link rel="stylesheet" href="~/src/css/overrides.css" />

    <!-- Font -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap" rel="stylesheet">

    <!-- PWA -->
    <link rel="manifest" href="~/src/manifest.json" />
</head>

<body style="background-color: #efefef; min-height: 100%; height: 100vh;">
    <div class="container">
        <!-- Header -->
        <div x-data="navbar(@JsonSerializerHelper.SerializeObject(Model.TopNavigation))"></div>
        <!-- Body -->
        @RenderBody() 
        <!-- Footer -->
        <div x-data="footer(footerData)"></div>
    </div>
    <!-- ./ Footer -->

    <!-- JS Libraries -->
    <!-- For componentizing and lazy loading Alpine -->
    <script type="module" src="~/src/js/init.js"></script>

    <!-- Minimal theme switcher -->
    <script src="~/src/js/minimal-theme-switcher.js"></script>

    <!-- DATA -->
    <script>
        let headerData = {
            title: 'feed.at',
            subtitle: 'A tiny front-end library to build simple sites',
            text: 'Total project size is < 20kb gzipped'
        }

        let footerData = {
            title: 'markdown.web',
            subtitle: 'A tiny front-end library to build simple sites',
            text: 'feed.at'
        }
    </script>

    <!-- Websockets -->
    <script>
        let socket = new WebSocket("wss://localhost:7220/messageHub");

        socket.onopen = function (e) {
            console.log("[open] Connection established");

            const endChar = String.fromCharCode(30);

            // send the protocol & version
            socket.send(`{"protocol":"json","version":1}${endChar}`);
        };

        socket.onmessage = function (event) {
            console.log(`[message] Data received from server: ${event.data}`);

            // parse server data
            const serverData = event.data.substring(0, event.data.length - 1);

            // after sending the protocol & version subscribe to your method(s)
            if (serverData === "{}") {
                const endChar = String.fromCharCode(30);
                socket.send(`{"arguments":[],"invocationId":"0","target":"Your-Method","type":1}${endChar}`);
                return;
            }

            // handle server messages
        };

        socket.onclose = function (event) {
            if (event.wasClean) {
                console.log(`[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`);
            } else {
                console.log('[close] Connection died');
            }
        };

        socket.onerror = function (error) {
            console.log(`[error] ${error.message}`);
        };
    </script>
</body>
</html>